// <auto-generated />
using System;
using Infrastructure.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(EntityDbContext))]
    partial class EntityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Infrastructure.Entities.Categories.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Category", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entities.City.CityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(65)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(65)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            DateCreated = new DateTime(2022, 5, 5, 5, 47, 4, 262, DateTimeKind.Local).AddTicks(4285),
                            Name = "Seattle"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            DateCreated = new DateTime(2022, 5, 5, 5, 47, 4, 262, DateTimeKind.Local).AddTicks(4295),
                            Name = "Tokyo"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Country.CountryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Country", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 5, 5, 5, 47, 4, 262, DateTimeKind.Local).AddTicks(4490),
                            Name = "USA"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 5, 5, 5, 47, 4, 262, DateTimeKind.Local).AddTicks(4492),
                            Name = "Japan(OwO)"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.PaymentInfo.PaymentInfoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CSV")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("PaymentInfo", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entities.Publisher.PublisherEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Publisher", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entities.Token.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserEntityId")
                        .HasColumnType("int");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Infrastructure.Entities.User.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("PaymentInfoId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PaymentInfoId");

                    b.ToTable("User", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adress = "admin",
                            CityId = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "O_pirtskhalaishvili@cu.edu.ge",
                            FirstName = "admin",
                            LastName = "admin",
                            Password = "3PtISEJDqaOI1xgzGHYzpkGCbshwLgq7K0Y/0gPObsU=",
                            Role = 1,
                            Salt = "mT/0MRWlzYAGTlz4Me+mzw==",
                            TelephoneNumber = "551001100",
                            UserName = "string",
                            Verified = new DateTime(2022, 5, 5, 5, 47, 4, 277, DateTimeKind.Local).AddTicks(1303)
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Videogame.VideogameEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("OldPrice")
                        .HasColumnType("float");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PublicsherId")
                        .HasColumnType("int");

                    b.Property<string>("VideogameName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("PublicsherId");

                    b.ToTable("Videogame", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entities.VideogameCategories.VideogameCategoryEntity", b =>
                {
                    b.Property<int>("VideogameId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("VideogameId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GameId");

                    b.ToTable("VideogameCategory", "dbo");
                });

            modelBuilder.Entity("Infrastructure.Entities.City.CityEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.Country.CountryEntity", "Country")
                        .WithMany("cityEntity")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Infrastructure.Entities.Token.RefreshToken", b =>
                {
                    b.HasOne("Infrastructure.Entities.User.UserEntity", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("Infrastructure.Entities.User.UserEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.City.CityEntity", "City")
                        .WithMany("userEntities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.PaymentInfo.PaymentInfoEntity", "PaymentInfo")
                        .WithMany("userEntities")
                        .HasForeignKey("PaymentInfoId");

                    b.Navigation("City");

                    b.Navigation("PaymentInfo");
                });

            modelBuilder.Entity("Infrastructure.Entities.Videogame.VideogameEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.Publisher.PublisherEntity", "Publicsher")
                        .WithMany("videoGameEntities")
                        .HasForeignKey("PublicsherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publicsher");
                });

            modelBuilder.Entity("Infrastructure.Entities.VideogameCategories.VideogameCategoryEntity", b =>
                {
                    b.HasOne("Infrastructure.Entities.Categories.CategoryEntity", "Category")
                        .WithMany("videogameCategoryEntities")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Videogame.VideogameEntity", "Game")
                        .WithMany("videogameCategoryEntities")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Infrastructure.Entities.Categories.CategoryEntity", b =>
                {
                    b.Navigation("videogameCategoryEntities");
                });

            modelBuilder.Entity("Infrastructure.Entities.City.CityEntity", b =>
                {
                    b.Navigation("userEntities");
                });

            modelBuilder.Entity("Infrastructure.Entities.Country.CountryEntity", b =>
                {
                    b.Navigation("cityEntity");
                });

            modelBuilder.Entity("Infrastructure.Entities.PaymentInfo.PaymentInfoEntity", b =>
                {
                    b.Navigation("userEntities");
                });

            modelBuilder.Entity("Infrastructure.Entities.Publisher.PublisherEntity", b =>
                {
                    b.Navigation("videoGameEntities");
                });

            modelBuilder.Entity("Infrastructure.Entities.User.UserEntity", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Infrastructure.Entities.Videogame.VideogameEntity", b =>
                {
                    b.Navigation("videogameCategoryEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
